#pragma kernel Sobel

Texture2D<float4> Input;
RWTexture2D<float4> Output;

[numthreads(32, 32, 1)]
void Sobel( uint3 threadID : SV_DispatchThreadID )
{
	float threshold = 0.20f;
	bool overlay = true;

	// Sample neighbor pixels
	// 00 01 02
	// 10 __ 12
	// 20 21 22
	float s00 = Input[threadID.xy + float2(-1, -1)].r;
	float s01 = Input[threadID.xy + float2( 0, -1)].r;
	float s02 = Input[threadID.xy + float2( 1, -1)].r;
	float s10 = Input[threadID.xy + float2(-1, 0)].r;
	float s12 = Input[threadID.xy + float2( 1, 0)].r;
	float s20 = Input[threadID.xy + float2(-1, 1)].r;
	float s21 = Input[threadID.xy + float2( 0, 1)].r;
	float s22 = Input[threadID.xy + float2( 1, 1)].r;

	float sobelX = s00 + 2 * s10 + s20 - s02 - 2 * s12 - s22;
	float sobelY = s00 + 2 * s01 + s02 - s20 - 2 * s21 - s22;

	float edgeSqr = (sobelX * sobelX + sobelY * sobelY);
	float result = 1.0 - (edgeSqr > threshold * threshold); //white background, black lines
	Output[threadID.xy] = result;

	if (overlay && result != 0.0)
		Output[threadID.xy] = Input[threadID.xy]; 
}